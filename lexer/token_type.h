#ifndef LEXER_TOKEN_TYPE_H
#define LEXER_TOKEN_TYPE_H

#include <map>
#include <string>
#include <vector>

namespace lexer {

enum TokenType {
  eof,
  Invalid,
  Integer,
  Real,
  String,
  Id,
  Keyword,
  Comment,
  Operation,
  Seperator,
};

std::string to_string(TokenType type);

const std::map<std::string, TokenType> token_type = {
    {"+", Operation}, {"+=", Operation}, {"-", Operation},  {"-=", Operation},
    {"*", Operation}, {"*=", Operation}, {"/", Operation},  {"/=", Operation},
    {"=", Operation}, {"<", Operation},  {"<>", Operation}, {"<=", Operation},
    {">", Operation}, {">=", Operation}, {":=", Operation}, {"^", Operation},

    {"(", Seperator}, {")", Seperator},  {"[", Seperator},  {"]", Seperator},
    {",", Seperator}, {".", Seperator},  {"..", Seperator}, {";", Seperator},
    {":", Seperator},
};

const std::map<std::string, std::string> token_value = {
    {"+", "ADD"},        {"+=", "ADDASSIGN"}, {"-", "SUB"},
    {"-=", "SUBASSIGN"}, {"*", "MUL"},        {"*=", "MULASSIGN"},
    {"/", "QUO"},        {"/=", "QUOASSIGN"}, {"=", "EQL"},
    {"<", "LES"},        {"<>", "NEQ"},       {"<=", "LEQ"},
    {">", "GTR"},        {">=", "GEQ"},       {":=", "ASSIGN"},
    {"^", "DEREF"},

    {"(", "LPAREN"},     {")", "RPAREN"},     {"[", "LBRACK"},
    {"]", "RBRACK"},     {",", "COMMA"},      {".", "PERIOD"},
    {"..", "ELLIPSIS"},  {";", "SEMICOLON"},  {":", "COLON"},
};

const std::vector<std::string> keywords = {"and",
                                           "array",
                                           "asm",
                                           "begin",
                                           "break",
                                           "case",
                                           "const",
                                           "constructor",
                                           "continue",
                                           "destructor",
                                           "div",
                                           "do",
                                           "downto",
                                           "else",
                                           "end",
                                           "false",
                                           "file",
                                           "for",
                                           "function",
                                           "goto",
                                           "if",
                                           "implementation",
                                           "in",
                                           "inline",
                                           "interface",
                                           "label",
                                           "mod",
                                           "nil",
                                           "not",
                                           "object",
                                           "of",
                                           "on",
                                           "operator",
                                           "or",
                                           "packed",
                                           "procedure",
                                           "program",
                                           "record",
                                           "repeat",
                                           "set",
                                           "shl",
                                           "shr",
                                           "string",
                                           "then",
                                           "to",
                                           "true",
                                           "type",
                                           "unit",
                                           "until",
                                           "uses",
                                           "var",
                                           "while",
                                           "with",
                                           "xor",
                                           "as",
                                           "class",
                                           "constref",
                                           "dispose",
                                           "except",
                                           "exit",
                                           "exports",
                                           "finalization",
                                           "finally",
                                           "inherited",
                                           "initialization",
                                           "is",
                                           "library",
                                           "new",
                                           "on",
                                           "out",
                                           "property",
                                           "raise",
                                           "self",
                                           "threadvar",
                                           "try",
                                           "absolute",
                                           "abstract",
                                           "alias",
                                           "assembler",
                                           "cdecl",
                                           "cppdecl",
                                           "default",
                                           "export",
                                           "external",
                                           "forward",
                                           "generic",
                                           "index",
                                           "local",
                                           "name",
                                           "nostackframe",
                                           "oldfpccall",
                                           "override",
                                           "pascal",
                                           "private",
                                           "protected",
                                           "public",
                                           "published",
                                           "read",
                                           "readln",
                                           "register",
                                           "reintroduce",
                                           "safecall",
                                           "softfloat",
                                           "specialize",
                                           "stdcall",
                                           "virtual",
                                           "write",
                                           "writeln",

                                           "string",
                                           "char",
                                           "integer",
                                           "real"};
} // namespace lexer

#endif // LEXER_TOKEN_TYPE_H